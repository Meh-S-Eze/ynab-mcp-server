
# ynab-mcp-server API Enhancement Product Requirements Document (PRD)

## Intro

This document outlines the requirements for enhancing the `ynab-mcp-server`, an existing Go-based application that provides a Model Context Protocol (MCP) interface to the You Need A Budget (YNAB) API. The primary goal of this project is to extend the server's capabilities to support all available YNAB API v1 endpoints related to categories and transactions. This will allow the primary user to achieve more comprehensive programmatic interaction with their YNAB data for personalized automation, data manipulation, and customized financial insights, which are not easily achievable through standard YNAB applications.

## Goals and Context

  - **Project Objectives:**
      * To implement MCP tools within `ynab-mcp-server` that correspond to all GET (read) operations for YNAB categories and transactions as defined in the YNAB OpenAPI v1 specification.
      * To implement MCP tools within `ynab-mcp-server` that correspond to all POST (create), PUT/PATCH (update), and DELETE (remove) operations for YNAB categories and transactions as defined in the YNAB OpenAPI v1 specification.
      * To ensure each new MCP tool is clearly documented with example usage and parameters in the project's README.
  - **Measurable Outcomes:**
      * Full coverage of specified YNAB API category and transaction endpoints implemented as MCP tools.
      * The user can programmatically manage all aspects of their YNAB categories and transactions relevant to the implemented endpoints using the enhanced `ynab-mcp-server`.
  - **Success Criteria:**
      * 100% of the YNAB API v1 category and transaction-related endpoints (GET, POST, PUT/PATCH, DELETE) are implemented as functional MCP tools in `ynab-mcp-server`.
      * Each implemented MCP tool passes test cases covering its primary use cases (e.g., creating, retrieving, updating, deleting categories/transactions, handling subtransactions/splits if supported by the API).
      * The primary user can successfully perform their intended personal YNAB category and transaction management tasks programmatically.
  - **Key Performance Indicators (KPIs):**
      * Percentage of targeted YNAB API category endpoints implemented.
      * Percentage of targeted YNAB API transaction endpoints implemented.
      * Number of documented MCP tools.
      * Successful execution rate of test cases for each tool.

## Scope and Requirements (MVP / Current Version)

### Functional Requirements (High-Level)

  - **Category Data Retrieval:**
      * List all categories for a specified budget.
      * Get details for a single category within a budget.
      * Get category-specific details (budgeted, activity, balance) for a specific month.
  - **Category Data Manipulation:**
      * Update a category's properties (e.g., name, note).
      * Update a category's budgeted amount for a specific month.
  - **Transaction Data Retrieval:**
      * List all transactions for a budget, with support for filtering (e.g., `since_date`, `type`).
      * Get details for a single transaction.
      * List transactions associated with a specific account.
      * List transactions associated with a specific category.
      * List transactions associated with a specific payee.
  - **Transaction Data Manipulation:**
      * Create a single new transaction with full parameter support.
      * Create multiple new transactions in bulk.
      * Update an existing transaction, including handling of subtransactions/splits if supported directly by the API for updates.
      * Update multiple transactions in bulk (e.g., bulk approval, categorization).
      * Delete a transaction.
  - **MCP Tool Integration:**
      * Each YNAB API endpoint interaction must be exposed as a distinct MCP tool.
      * MCP tools must accept parameters corresponding to the YNAB API request parameters (path, query, body).
      * MCP tools must output data corresponding to the YNAB API response structure.
  - **Documentation:**
      * Each new MCP tool must be documented in the project's README, including its purpose, MCP command, expected arguments, and example usage.

### Non-Functional Requirements (NFRs)

  - **Performance:**
      * API interactions must respect YNAB's API rate limits (200 requests per hour per token). Tools performing multiple operations should be designed with this in mind.
  - **Scalability:** Not a primary concern for personal use, but the implementation should not be inherently inefficient.
  - **Reliability/Availability:** The server should reliably translate MCP commands to YNAB API calls and accurately reflect API responses or errors.
  - **Security:** Authentication with the YNAB API will continue to use Personal Access Tokens. No new authentication schemes will be introduced in the server. The application is for personal, local use.
  - **Maintainability:** Code should be reasonably clean, maintainable, and follow Go best practices to facilitate future personal use and updates. It should align with the existing `ynab-mcp-server` codebase structure.
  - **Usability/Accessibility:** The MCP tools should have clear and intuitive command-line signatures and argument names. Error messages from the YNAB API should be clearly relayed to the user.
  - **Other Constraints:**
      * Must be an extension of the existing `ynab-mcp-server` project.
      * Primary language must be Go, leveraging the existing MCP framework.
      * Strictly for personal use and local execution.

### User Experience (UX) Requirements (High-Level)

  - UX is primarily command-line (MCP) based.
  - MCP tool names should be consistent and predictable, ideally mapping closely to YNAB API endpoint purposes (e.g., `listCategories`, `createTransaction`).
  - Tool arguments should be clearly named, reflecting YNAB API parameters.
  - Output should be structured and informative, suitable for scripting or human reading.
  - Error messages should be clear and provide context from the API.
  - No GUI is in scope. See `docs/ui-ux-spec.md` (though not applicable for a CLI-only tool, placeholder kept for template consistency).

### Integration Requirements (High-Level)

  - Integration Point 1: YNAB API v1 (OpenAPI spec: `https://api.ynab.com/papi/open_api_spec.yaml`)
      * All interactions will be with this API.
      * Authentication via Personal Access Tokens.
  - *(See `docs/api-reference.md` for YNAB API details)*

### Testing Requirements (High-Level)

  - A simple testing strategy for each new MCP tool is required to confirm correct interaction with the YNAB API.
  - This might involve manual test cases initially, aiming for basic validation (e.g., create a test category, add a transaction, update it, delete it).
  - Focus on functionality and correctness for personal use.
  - *(See `docs/testing-strategy.md` for details)*

## Epic Overview (MVP / Current Version)

  - **Epic 1: Category Read Operations** - Goal: Implement all GET operations for YNAB categories, enabling users to retrieve category information via MCP tools.
  - **Epic 2: Transaction Read Operations** - Goal: Implement all GET operations for YNAB transactions, enabling users to retrieve transaction information from various contexts (budget, account, category, payee) via MCP tools.
  - **Epic 3: Category Write Operations** - Goal: Implement POST, PUT/PATCH operations for YNAB categories, enabling users to create and update categories via MCP tools. (Note: YNAB API does not seem to support category creation/deletion, only updates. This epic will focus on updates).
  - **Epic 4: Transaction Write Operations** - Goal: Implement POST, PUT/PATCH, DELETE operations for YNAB transactions, enabling users to create, update, and delete single and bulk transactions via MCP tools.
  - **Epic 5: Documentation and Testing Setup** - Goal: Establish the initial testing approach and ensure all new MCP tools are documented in the project's README as they are developed.

## Key Reference Documents

  - `docs/project-brief.md` (User-provided brief)
  - `docs/architecture.md` (To be created by Architect, if applicable, or notes by dev)
  - `docs/epic1.md`, `docs/epic2.md`, `docs/epic3.md`, `docs/epic4.md`, `docs/epic5.md`
  - `docs/tech-stack.md` (Implicitly Go, based on existing project)
  - `docs/api-reference.md` (Contains link to YNAB OpenAPI spec)
  - `docs/testing-strategy.md`
  - `docs/ui-ux-spec.md` (Not applicable for CLI, but template includes it)

## Post-MVP / Future Enhancements

  - Implementation of YNAB API endpoints not directly related to categories or transactions.
  - More sophisticated error handling or retry mechanisms for API rate limits.
  - Automated test suite for all MCP tools.

## Change Log

| Change        | Date       | Version | Description                  | Author         |
| ------------- | ---------- | ------- | ---------------------------- | -------------- |
| Initial draft | 2025-05-16 | 0.1     | First draft based on project brief | PM Agent       |

## Initial Architect Prompt

This project extends an existing Go application (`ynab-mcp-server`). The architectural decisions are largely bound by the existing framework. The primary focus is on adding new "tool" functionalities that map to YNAB API endpoints.

### Technical Infrastructure

  - **Starter Project/Template:** Existing `ynab-mcp-server` project ([https://github.com/calebl/ynab-mcp-server](https://github.com/calebl/ynab-mcp-server)).
  - **Hosting/Cloud Provider:** Not applicable (local execution for personal use).
  - **Frontend Platform:** Not applicable (CLI-based MCP interface).
  - **Backend Platform:** Go (must align with the existing `ynab-mcp-server` codebase and its MCP framework).
  - **Database Requirements:** Not applicable (data resides in YNAB, accessed via API).

### Technical Constraints

  - Must extend the existing `ynab-mcp-server` and its MCP framework.
  - All API interactions must adhere to YNAB's API rate limits (200 requests per hour per token).
  - Authentication with YNAB API via Personal Access Tokens (as currently handled by the server or YNAB API library used).
  - Careful mapping of all YNAB API request/response fields for each endpoint to MCP tool inputs/outputs, including optional parameters, data types (e.g., milliunits for currency), and date formats.
  - Bulk operations (POST `/budgets/{budget_id}/transactions/bulk`, PATCH `/budgets/{budget_id}/transactions`) require handling arrays of transaction objects.
  - Investigate and implement support for subtransactions/split transactions if the YNAB API allows their creation/manipulation through the targeted transaction endpoints.
  - The existing server's README notes potential direct SDK usage as an alternative if the MCP framework proves limiting for complex interactions; this should be kept in mind.

### Deployment Considerations

  - Not applicable (local execution). Updates will be via `git pull` and re-compiling the Go application.

### Local Development & Testing Requirements

  - The user (developer) must be able to run the `ynab-mcp-server` locally.
  - Testing will likely involve direct interaction with the YNAB API using a personal YNAB account and token.
  - MCP tools should provide clear feedback on success or failure, passing through relevant error messages from the YNAB API.
  - Consider a simple, repeatable testing strategy for each new tool (e.g., creating test data in YNAB, performing MCP operations, verifying results, cleaning up test data).

### Other Technical Considerations

  - **Idempotency:** YNAB API handles its own idempotency for some mutating requests. MCP tools should clearly relay the outcomes.
  - **Error Handling:** Robustly handle potential API errors, rate limits, and network issues, providing informative messages to the MCP user.
  - **YNAB API Version:** Ensure compatibility with YNAB API v1. Be mindful of potential breaking changes in future YNAB API versions, though this is more of a maintenance concern.
  - **Data Formatting:** Pay close attention to YNAB's currency format (milliunits) and date formats (ISO 8601). MCP tools might need to accept more user-friendly formats and convert them, or clearly document the required input formats.

Next, I will create the initial draft Epic files.